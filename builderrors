#!/usr/bin/env bash

VERSION=2.15.0

# Enable Gitlab collapsible sections from Gitlab 12.0 onwards
# https://docs.gitlab.com/ee/ci/jobs/index.html#custom-collapsible-sections
GITLAB_VERSION_REQUIRED=12
if [[ $CI_SERVER_VERSION_MAJOR -ge $GITLAB_VERSION_REQUIRED ]]; then
  SECTION_START="\e[0Ksection_start:${START_TIME}:${CODE}[collapsed=true]\r\e[0K"
  SECTION_END="\e[0Ksection_end:${END_TIME}:${CODE}\r\e[0K"
fi

# If Gitlab is modern enough, or the terminal supports colors, define colors
if [[ "$CI_SERVER_VERSION_MAJOR" -ge "$GITLAB_VERSION_REQUIRED" ]] || { [[ -t 1 ]] && { tput colors &> /dev/null && [ -n "$(tput colors)" ] && [ "$(tput colors)" -ge 8 ]; }; }; then
  RED="\033[31;1m"
  GREEN="\033[32;1m"
  BROWN="\033[33;1m"
  YELLOW="\033[93;1m"
  CLEAR="\033[0m"
fi

# Run git with default options
GIT="git -c core.quotePath=false -c core.longPaths=true"
$GIT config --global --add safe.directory "$(pwd)"

# Define a regular expression for matching minified files
RE_MINIFIED='[\.\-](min|pack)\.(js|css)$'

# Get the directory where the script is located
SCRIPT_DIR=`dirname "$(realpath "$0")"`
# Set the directory where node modules are installed
NODE_DIR="$SCRIPT_DIR/node_modules/.bin"

# stylelint can't process Cygwin paths. Convert to Windows path if required
CYGPATH="$(which cygpath)"
WIN_SCRIPT_DIR="$SCRIPT_DIR"
if [ -x "$CYGPATH" ] ; then
  WIN_SCRIPT_DIR="$(cygpath -aw "$SCRIPT_DIR")"
fi

# Set the locale to use for sorting files consistently
export LC_ALL=C

# Parse command-line options and set environment variables using Python.
# Note: Strip \r in Windows.
PARSE_OUTPUT="$(python "$WIN_SCRIPT_DIR/scripts/parseoptions.py" "$@" | tr -d '\r')"
# If the output from the options parser indicates success, evaluate it to set the environment variables
# This sets environment variables like SKIP_*.
if [[ "$PARSE_OUTPUT" == *"BUILDERROR_OPTIONS_PARSED"* ]]; then
  eval "$PARSE_OUTPUT"
# Otherwise, print the output and exit with an error code
else
  echo "$PARSE_OUTPUT"
  exit 1
fi

# To start with, we don't have any errors
EXIT_STATUS=0
# It takes 0 minutes to fix each error
FIX_MINUTES=0

# Usage: check $SKIP $TYPE $CODE $MSG $FIX
#   $SKIP: Ignore check if specified
#   $TYPE: "ERROR" or "WARNING" or "INFO"
#   $CODE: unique error ID, e.g. flake8, eslint
#   $TIME_TO_FIX: # minutes to fix each error
#   $MSG: the message that's printed before any error
#   $FIX: optional "To fix, run:" message
#   Runs "check-$CODE" function
check() {
  SKIP="$1"
  if [[ -z "$SKIP" ]]; then
    TYPE="$2"
    CODE="$3"
    TIME_TO_FIX="$4"
    MSG="$5"
    FIX="$6"

    START_TIME="$(date +%s)"
    OUTPUT=$(check-$CODE)
    END_TIME="$(date +%s)"

    # Print the output if there's an output unless it's an INFO outside a CI environment
    # TODO: Set BUILD_ENV based on CI environment
    if [[ -n "$OUTPUT" && ( "$TYPE" != "INFO" || -n "$BUILD_ENV" ) ]]; then
      # If it's an error check, print "ERROR:" in red, and exit later with error.
      # If it's a warning, print "WARNING:" in brown, don't set exit status as error.
      echo ""
      if [[ "$TYPE" == "ERROR" ]]; then
        # If it's an error, increment FIX_MINUTES by the time to fix (in minutes)
        # Calculate "SECONDS" based on TIME_TO_FIX (e.g. "5 min", "30 sec/error")
        DURATION=$(echo "$TIME_TO_FIX" | grep -oE '[0-9]+')
        if [[ "$TIME_TO_FIX" == *"min"* ]]; then
          SECONDS=$(( DURATION * 60 ))
        elif [[ "$TIME_TO_FIX" == *"sec"* ]]; then
          SECONDS="$DURATION"
        fi
        # If the time to fix is per error ("/error"), multiply by # of lines = # of errors
        if [[ "$TIME_TO_FIX" == *"error"* ]]; then
          LINES=$(wc -l <<< ${OUTPUT})
          SECONDS=$((SECONDS * LINES))
        fi
        MINUTES=$((SECONDS / 60))
        FIX_MINUTES=$((FIX_MINUTES + MINUTES))
        echo -e "${SECTION_START}${RED}$TYPE ($CODE)${CLEAR} $MSG. ${YELLOW}${MINUTES} min${CLEAR}"
        EXIT_STATUS=1
      elif [[ "$TYPE" == "WARNING" ]]; then
        echo -e "${SECTION_START}${BROWN}$TYPE ($CODE)${CLEAR} $MSG."
      elif [[ "$TYPE" == "INFO" ]]; then
        echo -e "${SECTION_START}${GREEN}$TYPE ($CODE)${CLEAR} $MSG."
      fi
      echo -e "${YELLOW}HELP${CLEAR} https://github.com/gramener/builderrors/#${CODE}"
      if [[ -n "$FIX" ]]; then
        echo -e "${GREEN}To fix, run${CLEAR}: ${FIX}"
      fi
      echo ""
      # Strip empty lines and indent output
      echo -E "$OUTPUT" | sed -r '/^\s*$/d' | sed "s/^/    /"
      echo -e "${SECTION_END}"
    # On Gitlab, print an OK message
    elif [[ -n "$CI_SERVER_VERSION_MAJOR" ]]; then
      echo -e "${SECTION_START}${GREEN}OK ($CODE)${CLEAR}${SECTION_END}"
    fi
  fi
}

# Use the venv-core Python environment
if [[ -f "${SCRIPT_DIR}/venv-core/bin/activate" ]]; then
  source "${SCRIPT_DIR}/venv-core/bin/activate"
elif [[ -f "${SCRIPT_DIR}/venv-core/Scripts/activate" ]]; then
  source "${SCRIPT_DIR}/venv-core/Scripts/activate"
fi

# Run tests in $TARGET_DIR
cd "$TARGET_DIR" 2>&1 >/dev/null

check-lib() {
  $GIT ls-files | grep -E 'node_modules/|bower_components/' | sort
}
check "$SKIP_LIB" "$ERROR_LIB" "lib" "15 min" "don't commit libraries" ""

check-minified() {
  $GIT ls-files | grep -E "$RE_MINIFIED" | sort
}
check "$SKIP_MINIFIED" "$ERROR_MINIFIED" "minified" "15 min" "don't commit minified files" ""

check-lfs() {
  # comm -23 prints lines unique to file list #1
  #   #1: git files > 1 MB, sorted
  #   #2: git lfs files, sorted
  # Note: git ls-tree --format is supported only in Git 2.36+ (Apr 2022), so use --long instead
  comm -23 <($GIT ls-tree -r --long HEAD | cut -c53- | awk -F'\t' "\$1 > ${LFS_SIZE:-1000000} { print(\$2) }" | sort) <($GIT lfs ls-files -n | sort)
}
check "$SKIP_LFS" "$ERROR_LFS" "lfs" "15 min" "use Git LFS for large files" ""

check-useless() {
  $GIT ls-files | grep -E '(\.lnk$|^~\$|~$|\.sublime-|\.ipynb_checkpoints$|\.stackdump$|^thumbs.db$|\.log$)' | sort
}
check "$SKIP_USELESS" "$ERROR_USELESS" "useless" "15 min" "don't commit useless/generated files" ""

check-duplicate-files() {
  # List commited files  - git ls-tree ...
  #   unicode intact     -   -c core.quotePath=false
  # that are big enough  - awk ...
  # Calculate MD5 hash   - xargs md5sum
  # Sort by MD5 hash     - sort
  # Take duplicates      - uniq -w32 -dD
  # Print as groups      - awk '...;sub(/^\*/, "", $2);...'
  #                      -          ^ strip leading * if Cygwin treats file as binary
  # Note: git ls-tree --format is supported only in Git 2.36+ (Apr 2022), so use --long instead
  $GIT ls-tree -r --long HEAD | cut -c53- | awk -F'\t' "\$1 > ${DUPLICATE_FILESIZE:-100} { print(\$2) }" | tr '\n' '\0' | \
    xargs -0 --no-run-if-empty md5sum | sort | uniq -w32 -dD | \
    awk '{if(h!=$1){printf "\n"};sub(/^\*/, "", $2);for (i=2; i<=NF; ++i) printf "%s ", $i;h=$1}'
}
check "$SKIP_DUPLICATE_FILES" "$ERROR_DUPLICATE_FILES" "duplicate-files" "10 min/error" "delete duplicate files" ""

check-duplicate-lines() {
  # jscpd prints a table of results and "Found <nn> clones" and "Detection time: <nn>ms". Ignore these lines at the end using:
  #   grep '^[a-zA-Z]'        # cut out the table
  #   grep -v '^Found '       # remove "Found <nn> clones"
  #   grep -v '^Detection '   # remove "Detection time: <nn>ms"
  $GIT ls-files | grep -E '\.(js|mjs|ts|jsx|tsx|vue|py|css|scss)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/jscpd" --min-lines="${DUPLICATE_LINES:-25}" --mode=weak 2>&1 | grep '^[a-zA-Z ]' | grep -v '^Found ' | grep -v '^Detection '
}
check "$SKIP_DUPLICATE_LINES" "$ERROR_DUPLICATE_LINES" "duplicate-lines" "15 min/error" "reduce duplicate lines" ""

check-prettier() {
  # NOTE: Don't run prettier on minified files. No point, and it bloats errors
  # NOTE: Don't run prettier on HTML files. It does not handle Tornado / Lodash templates
  $GIT ls-files | grep -E '\.(js|mjs|ts|jsx|tsx|vue|css|scss|sass|yml|yaml|md)$' | grep -v -E "$RE_MINIFIED" | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/prettier" --list-different 2>&1
}
check "$SKIP_PRETTIER" "$ERROR_PRETTIER" "prettier" "2 min" "auto-format JS/CSS with Prettier" "npx prettier@3 --write \"**/*.{js,mjs,ts,jsx,tsx,vue,css,scss,sass,yaml,md}\""

check-black() {
  # black prints "All done!" and "Oh no!" and "<nn> files would be left unchanged." with unicode characters and color. Strip with "grep -v ..."
  $GIT ls-files | grep -E '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty black --check --skip-string-normalization --line-length=${PY_LINE_LENGTH:-99} 2>&1 |
    grep -v "^All done!" | \
    grep -v "^Oh no!" | \
    grep -v "would be left unchanged." | \
    grep -v "would be reformatted."
}
check "$SKIP_BLACK" "$ERROR_BLACK" "black" "2 min" "auto-format Python with Black" "black . --skip-string-normalization --line-length=${PY_LINE_LENGTH:-99}"

check-py-filenames() {
  $GIT ls-files | grep '\.py$' | sort | grep -e '[^a-z0-9_./]'
}
check "$SKIP_PY_FILENAMES" "$ERROR_PY_FILENAMES" "py-filenames" "5 min/error" "use lower_alpha Python paths" ""

check-flake8() {
  # flake8: ignore E203 which is not PEP8 compliant
  # https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#slices
  # flake8: ignore E501 which black handles
  # https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length
  $GIT ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty flake8 --extend-ignore=E203,E501
}
check "$SKIP_FLAKE8" "$ERROR_FLAKE8" "flake8" "1 min/error" "fix Python errors" ""

check-bandit() {
  # Don't use git ls-files and then run bandit. Bandit ignores any `.bandit` files in such cases
  bandit -r . --format custom --severity-level ${BANDIT_SEVERITY:-all} --confidence-level ${BANDIT_CONFIDENCE:-all} --exclude="*/*test*/*,*/node_modules/*,*/venv*/*" --quiet 2>/dev/null
}
check "$SKIP_BANDIT" "$ERROR_BANDIT" "bandit" "10 min/error" "fix Python security errors" ""

# Set up ESLINT_OPTIONS
# If user didn't skip default ESLINT checks, and there's no .eslintrc.*, eslint.config.js, or eslintConfig in package.json, use eslint from root
if [[ ! -n "$SKIP_ESLINT_DEFAULT" ]] && ! compgen -G ".eslintrc.*" > /dev/null && ! compgen -G "eslint.config.js" && ! grep -q '"eslintConfig"' package.json 2>/dev/null ; then
  # When using default config, resolve plugins relative to builderrors
  ESLINT_OPTIONS="--config $WIN_SCRIPT_DIR/.eslintrc.yml"
else
  # When using project config, resolve plugins relative current directory
  npm install > /dev/null 2>&1
  ESLINT_OPTIONS="--resolve-plugins-relative-to ."
fi

check-eslint() {
  # eslint prints ".. problems" at the end. Strip with "grep -v ..."
  $GIT ls-files | grep -E '\.(html|js|mjs)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/eslint" $ESLINT_OPTIONS --quiet --format unix 2>&1 | \
    grep -v "^[0-9]* problems"
}
check "$SKIP_ESLINT" "$ERROR_ESLINT" "eslint" "10 sec/error" "fix JavaScript errors" "npx eslint --fix"

# Usage: run-local-eslint $PLUGIN $RULE $PATTERN
run-local-eslint() {
  PLUGIN="$1"   # e.g. "no-data-blocks"
  RULE="$2"     # e.g. "no-data-blocks/no-data-blocks: [error, 100]"
  PATTERN="$3"  # e.g. "Error/no-data-blocks/no-data-blocks"
  # NOTE: we use existing .eslintrc if available. This helps identify the source type as module or script.
  # BUT: we run plugins from the builderrors folder. This lets us use the no-data-blocks plugin without installing.
  # PROBLEM: If .eslintrc has plugins NOT present in builderrors, the rules will fail
  $GIT ls-files | grep -E '\.(html|js|mjs)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/eslint" \
    --parser-options ecmaVersion:latest \
    --plugin html --plugin template --plugin "$PLUGIN" \
    --resolve-plugins-relative-to "$WIN_SCRIPT_DIR" \
    --rule "$RULE" \
    --quiet \
    --format unix 2>&1 | \
    grep "$PATTERN"
}

check-data-blocks() {
  run-local-eslint "no-data-blocks" "no-data-blocks/no-data-blocks: [error, 100]" "Error/no-data-blocks/no-data-blocks"
}
check "$SKIP_DATA_BLOCKS" "$ERROR_DATA_BLOCKS" "data-blocks" "5 min/error" "move large data to JSON" ""

check-stylelint() {
  # stylelint prints "3 problems" at the end. Strip with "grep -v ..."
  $GIT ls-files | grep -E '\.s?css$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/stylelint" --allow-empty-input --config-basedir "$WIN_SCRIPT_DIR" --custom-syntax "$WIN_SCRIPT_DIR/node_modules/postcss-scss" --formatter unix 2>&1 | \
    grep -v "^[0-9]* problems"
}
if [[ -z "$SKIP_STYLELINT" ]]; then
  # stylelint uses v8-compile-cache. Disable it since there's nothing to cache on CI
  export DISABLE_V8_COMPILE_CACHE=1
  # If user didn't skip default STYLELINT checks, and there's no .stylelint.*, use eslint from root
  if [[ ! -n "$SKIP_STYLELINT_DEFAULT" ]] && ! compgen -G ".stylelintrc.*" > /dev/null; then
    cp "$SCRIPT_DIR/.stylelintrc.yml" .
    CREATED_STYLELINTRC=1
  fi
  check "$SKIP_STYLELINT" "$ERROR_STYLELINT" "stylelint" "3 min/error" "fix CSS errors" ""
  if [[ -n "$CREATED_STYLELINTRC" ]]; then
    rm .stylelintrc.yml
  fi
fi

check-htmlhint() {
  # htmlhint prints "3 problems" at the end. Strip with "grep -v ..."
  $GIT ls-files | grep '\.html$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/htmlhint" --nocolor --format unix | \
    grep -v "^[0-9]* problems"
}
if [[ -z "$SKIP_HTMLHINT" ]]; then
  if [[ ! -f ".htmlhintrc" ]]; then
    cp "$SCRIPT_DIR/.htmlhintrc" .
    CREATED_HTMLHINTRC=1
  fi
  check "$SKIP_HTMLHINT" "$ERROR_HTMLHINT" "htmlhint" "5 min/error" "fix HTML errors" ""
  if [[ -n "$CREATED_HTMLHINTRC" ]]; then
    rm .htmlhintrc
  fi
fi

check-gitleaks() {
  # Limit checks to 10 commits for speed (if we have history)
  gitleaks detect --no-color --no-banner --verbose --log-opts="-n 10" 2>/dev/null
}
check "$SKIP_GITLEAKS" "$ERROR_GITLEAKS" "gitleaks" "30 min/error" "don't commit secrets" ""

# For warnings, use the venv-extra Python environment
if [[ -f "${SCRIPT_DIR}/venv-extra/bin/activate" ]]; then
  source "${SCRIPT_DIR}/venv-extra/bin/activate"
elif [[ -f "${SCRIPT_DIR}/venv-extra/Scripts/activate" ]]; then
  source "${SCRIPT_DIR}/venv-extra/Scripts/activate"
fi

check-js-modules() {
  $GIT ls-files | grep '\.html$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty node "$WIN_SCRIPT_DIR/scripts/jsmodules.js" 2>&1
}
check "$SKIP_JS_MODULES" "$ERROR_JS_MODULES" "js-modules" "30 min/error" "use JavaScript modules" ""

check-npm-audit() {
  npm audit --prefer-offline --progress=false --json | node "$WIN_SCRIPT_DIR/scripts/format-npm-audit.js"
}
if [[ -f "package-lock.json" ]]; then
  check "$SKIP_NPM_AUDIT" "$ERROR_NPM_AUDIT" "npm-audit" "15 min/error" "avoid unsafe npm packages" "npm audit fix"
fi

check-flake8-extra() {
  $GIT ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty flake8 --extend-ignore=E203,E501
}
check "$SKIP_FLAKE8_EXTRA" "$ERROR_FLAKE8_EXTRA" "flake8-extra" "5 min/error" "improve Python code" ""

check-complexity() {
  # Add the complexity rule ot default ESLINT_OPTIONS
  $GIT ls-files | grep -E '\.(html|js|mjs)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/eslint" \
    $ESLINT_OPTIONS \
    --rule "complexity: [error, {max: ${MAX_JS_COMPLEXITY:-10}}]" \
    --quiet --format unix 2>&1 | \
    grep "Error/complexity"
  $GIT ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty flake8 \
    --isolated \
    --ignore=A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z \
    --max-complexity="${MAX_PY_COMPLEXITY:-10}" \
    --select=C901
}
check "$SKIP_COMPLEXITY" "$ERROR_COMPLEXITY" "complexity" "120 min/error" "review complex code" ""

check-url-templates() {
  run-local-eslint "no-url-params-template" "no-url-params-template/no-url-params-template: [error]" "Error/no-url-params-template/no-url-params-template"
}
check "$SKIP_URL_TEMPLATES" "$ERROR_URL_TEMPLATES" "url-templates" "5 min/error" "use URLSearchParams to construct URLs" ""

check-pydoc() {
  $GIT ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty pydocstyle --select=D1
}
check "$SKIP_PYDOC" "$ERROR_PYDOC" "pydoc" "15 min/error" "document Python code" ""

check-absolute-urls() {
  $GIT ls-files | grep '\.html$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty grep -e 'href\s*=\s*"/[^/]' -e 'src\s*=\s*"/[^/]'
}
check "$SKIP_ABSOLUTE_URLS" "$ERROR_ABSOLUTE_URLS" "absolute-urls" "10 min/error" "avoid absolute URLs" ""

check-folders() {
  $GIT ls-files | python "$WIN_SCRIPT_DIR/scripts/printfiles.py"
}
check "$SKIP_FOLDERS" "$ERROR_FOLDERS" "folders" "0 min" "review folder structure and files" ""

check-css-size() {
  $GIT ls-files | grep -E '\.s?css$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty wc | sort -nrk 1
}
check "$SKIP_CSS_SIZE" "$ERROR_CSS_SIZE" "css-size" "0 min" "review largest CSS code" ""

check-code-size() {
  $GIT ls-files | grep -E '\.(py|js|mjs|ts|jsx|tsx|vue)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty wc | sort -nrk 1
}
check "$SKIP_CODE_SIZE" "$ERROR_CODE_SIZE" "code-size" "0 min" "review largest PY/JS code" ""

# If ANY of the ERRORS above failed, exit with an error message
if [[ $EXIT_STATUS -ne 0 ]]; then
  echo -e "${RED}---------------------------------------------------------------------${CLEAR}"
  echo -e "${RED}BUILD FAILED on builderrors v$VERSION${CLEAR}. ${FIX_MINUTES} min to fix"
else
  echo -e "${GREEN}---------------------------------------------------------------------${CLEAR}"
  echo -e "${GREEN}BUILD PASSED on builderrors v$VERSION${CLEAR}."
fi
echo -e "${YELLOW}HELP${CLEAR} https://github.com/gramener/builderrors"

exit $EXIT_STATUS
