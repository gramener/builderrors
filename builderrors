#!/usr/bin/env bash

VERSION=1.1.3

# Default options
# NOTE: Bandit catches SQL injections only at low confidence. So default confidence to all, not medium/high
BANDIT_CONFIDENCE=${BANDIT_CONFIDENCE:-all}     # Bandit reports only issues of given confidence level or higher
BANDIT_SEVERITY=${BANDIT_SEVERITY:-all}         # Bandit reports only issues of given severity level or higher
DUPLICATE_FILESIZE=${DUPLICATE_FILESIZE:-100}   # Max file size allowed for duplicate files
DUPLICATE_LINES=${DUPLICATE_LINES:-50}          # Max # of duplicate lines allowed
PY_LINE_LENGTH=${PY_LINE_LENGTH:-99}            # Python line length
CSS_CHARS_ERROR=${CSS_CHARS_ERROR:-10000}       # Max # of minified CSS/SCSS chars allowed
CODE_CHARS_ERROR=${CODE_CHARS_ERROR:-50000}     # Max # of minified PY/JS chars allowed
LFS_SIZE=${LFS_SIZE:-1000000}                   # Max file size you can commit without LFS
RE_MINIFIED='[\.\-](min|pack)\.(js|css)$'       # RegEx for minified files

# Set consistent sort order
export LC_ALL=C

# Refer https://stackoverflow.com/a/7948533/100904 for getopt usage
OPTIONS=v
LONGOPTS=verbose,skip-lib,skip-minified,skip-lfs,skip-prettier,skip-useless,skip-duplicate-files,skip-duplicate-lines,skip-py-filenames,skip-black,skip-flake8,skip-bandit,skip-eslint,skip-eslint-default,skip-stylelint,skip-htmlhint,skip-css-chars,skip-code-chars,skip-npm-audit,skip-flake8-extra,skip-absolute-urls,lfs-size:,duplicate-filesize:,duplicate-lines:,py-line-length:,bandit-confidence:,bandit-severity:,css-chars-error:,code-chars-error:
TEMP=$(getopt --options "$OPTIONS" --longoptions "$LONGOPTS" --name builderrors -- "$@")
if [ $? != 0 ] ; then echo "Could not run: builderrors $@" >&2 ; exit 1 ; fi
eval set -- "$TEMP"
while true; do
  case "$1" in
    "-v" | "--verbose" ) VERBOSE='--'; shift ;;
    "--skip-lib" ) SKIP_LIB='--'; shift ;;
    "--skip-minified" ) SKIP_MINIFIED='--'; shift ;;
    "--skip-lfs" ) SKIP_LFS='--'; shift ;;
    "--skip-prettier" ) SKIP_PRETTIER='--'; shift ;;
    "--skip-useless" ) SKIP_USELESS='--'; shift ;;
    "--skip-duplicate-files" ) SKIP_DUPLICATE_FILES='--'; shift ;;
    "--skip-duplicate-lines" ) SKIP_DUPLICATE_LINES='--'; shift ;;
    "--skip-py-filenames" ) SKIP_PY_FILENAMES='--'; shift ;;
    "--skip-black" ) SKIP_BLACK='--'; shift ;;
    "--skip-flake8" ) SKIP_FLAKE8='--'; shift ;;
    "--skip-bandit" ) SKIP_BANDIT='--'; shift ;;
    "--skip-eslint" ) SKIP_ESLINT='--'; shift ;;
    "--skip-eslint-default" ) SKIP_ESLINT_DEFAULT='--'; shift ;;
    "--skip-stylelint" ) SKIP_STYLELINT='--'; shift ;;
    "--skip-htmlhint" ) SKIP_HTMLHINT='--'; shift ;;
    "--skip-css-chars" ) SKIP_CSS_CHARS='--'; shift ;;
    "--skip-code-chars" ) SKIP_CODE_CHARS='--'; shift ;;
    "--skip-npm-audit" ) SKIP_NPM_AUDIT='--'; shift ;;
    "--skip-flake8-extra" ) SKIP_FLAKE8_EXTRA='--'; shift ;;
    "--skip-absolute-urls" ) SKIP_ABSOLUTE_URLS='--'; shift ;;
    "--lfs-size" ) LFS_SIZE=$2; shift 2 ;;
    "--duplicate-filesize" ) DUPLICATE_FILESIZE=$2; shift 2 ;;
    "--duplicate-lines" ) DUPLICATE_LINES=$2; shift 2 ;;
    "--py-line-length" ) PY_LINE_LENGTH=$2; shift 2 ;;
    "--bandit-severity" ) BANDIT_SEVERITY=$2; shift 2 ;;
    "--bandit-confidence" ) BANDIT_CONFIDENCE=$2; shift 2 ;;
    "--css-chars-error" ) CSS_CHARS_ERROR=$2; shift 2 ;;
    "--code-chars-error" ) CODE_CHARS_ERROR=$2; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

# Run build error checks in $TARGET_DIR, which is set from environment variable, or command line, or .
TARGET_DIR=${TARGET_DIR:-$1}
TARGET_DIR=${TARGET_DIR:-.}

if [[ -n "$VERBOSE" ]]; then
  echo "builderrors   # version ${VERSION} \\"
  echo "  ${VERBOSE:-# --}verbose \\"
  echo "  ${SKIP_LIB:-# --}skip-lib \\"
  echo "  ${SKIP_MINIFIED:-# --}skip-minified \\"
  echo "  ${SKIP_LFS:-# --}skip-lfs \\"
  echo "  ${SKIP_PRETTIER:-# --}skip-prettier \\"
  echo "  ${SKIP_USELESS:-# --}skip-useless \\"
  echo "  ${SKIP_DUPLICATE_FILES:-# --}skip-duplicate-files \\"
  echo "  ${SKIP_DUPLICATE_LINES:-# --}skip-duplicate-lines \\"
  echo "  ${SKIP_PY_FILENAMES:-# --}skip-py-filenames \\"
  echo "  ${SKIP_BLACK:-# --}skip-black \\"
  echo "  ${SKIP_FLAKE8:-# --}skip-flake8 \\"
  echo "  ${SKIP_BANDIT:-# --}skip-bandit \\"
  echo "  ${SKIP_ESLINT:-# --}skip-eslint \\"
  echo "  ${SKIP_ESLINT_DEFAULT:-# --}skip-eslint-default \\"
  echo "  ${SKIP_STYLELINT:-# --}skip-stylelint \\"
  echo "  ${SKIP_HTMLHINT:-# --}skip-htmlhint \\"
  echo "  ${SKIP_CSS_CHARS:-# --}skip-css-chars \\"
  echo "  ${SKIP_CODE_CHARS:-# --}skip-code-chars \\"
  echo "  ${SKIP_NPM_AUDIT:-# --}skip-npm-audit \\"
  echo "  ${SKIP_FLAKE8_EXTRA:-# --}skip-flake8-extra \\"
  echo "  ${SKIP_ABSOLUTE_URLS:-# --}skip-absolute-urls \\"
  echo "  --lfs-size=$LFS_SIZE \\"
  echo "  --duplicate-filesize=$DUPLICATE_FILESIZE \\"
  echo "  --duplicate-lines=$DUPLICATE_LINES \\"
  echo "  --py-line-length=$PY_LINE_LENGTH \\"
  echo "  --bandit-confidence=$BANDIT_CONFIDENCE \\"
  echo "  --bandit-severity=$BANDIT_SEVERITY \\"
  echo "  --css-chars-error=$CSS_CHARS_ERROR \\"
  echo "  --code-chars-error=$CODE_CHARS_ERROR \\"
  echo "  ${TARGET_DIR}"
  echo ""
fi

SCRIPT_DIR=`dirname "$(realpath "$0")"`
NODE_DIR="$SCRIPT_DIR/node_modules/.bin"

# stylelint can't process Cygwin paths. Convert to Windows path if required
CYGPATH="$(which cygpath)"
WIN_SCRIPT_DIR="$SCRIPT_DIR"
if [ -x "$CYGPATH" ] ; then
  WIN_SCRIPT_DIR="$(cygpath -aw "$SCRIPT_DIR")"
fi

# By default, we don't have any errors
EXIT_STATUS=0

# Foreground colors (ANSI escape codes)
RED="\033[31;1m"
GREEN="\033[32;1m"
BROWN="\033[33;1m"
YELLOW="\033[93;1m"
CLEAR="\033[0m"

# Usage: check $TYPE $SKIP $MSG $OUTPUT
#   $TYPE: "ERROR" or "WARNING"
#   $CODE: unique error ID, e.g. flake8, eslint
#   $MSG: the message that's printed before any error
#   $FIX: optional "To fix, run:" message
#   $OUTPUT: check runs this. If it prints something, check prints $MSG and $OUTPUT (indented)
#   If there's an error, it sets $EXIT_STATUS to 1
check() {
  TYPE="$1"
  CODE="$2"
  MSG="$3"
  FIX="$4"
  OUTPUT="$5"
  NEW_TIMER="$(date +%s)"
  # Enable Gitlab collapsible sections from Gitlab 12.0 onwards
  # https://docs.gitlab.com/ee/ci/jobs/index.html#custom-collapsible-sections
  GITLAB_VERSION_REQUIRED=12
  if [[ $CI_SERVER_VERSION_MAJOR -ge $GITLAB_VERSION_REQUIRED ]]; then
    SECTION_START="\e[0Ksection_start:${TIMER}:${CODE}[collapsed=true]\r\e[0K"
    SECTION_END="\e[0Ksection_end:${NEW_TIMER}:${CODE}\r\e[0K"
  fi
  if [[ -n "$OUTPUT" ]]; then
    # If it's an error check, print "ERROR:" in red, and exit later with error.
    # If it's a warning, print "WARNING:" in brown, don't set exit status as error.
    echo ""
    if [[ "$TYPE" == "ERROR" ]]; then
      echo -e "${SECTION_START}${RED}$TYPE ($CODE)${CLEAR} $MSG"
      EXIT_STATUS=1
    else
      echo -e "${SECTION_START}${BROWN}$TYPE ($CODE)${CLEAR} $MSG"
    fi
    echo -e "${YELLOW}HELP${CLEAR} https://github.com/gramener/builderrors/#${CODE}"
    if [[ -n "$FIX" ]]; then
      echo -e "${GREEN}To fix, run${CLEAR}: ${FIX}"
    fi
    echo ""
    echo -E "$OUTPUT" | sed "s/^/    /"
    echo -e "${SECTION_END}"
  # On Gitlab, print an OK message
  elif [[ -n "$CI_SERVER_VERSION_MAJOR" ]]; then
    echo -e "${GREEN}OK ($CODE)${CLEAR}"
  fi
  TIMER="$NEW_TIMER"
}

# Use the venv-core Python environment
if [[ -f "${SCRIPT_DIR}/venv-core/bin/activate" ]]; then
  source "${SCRIPT_DIR}/venv-core/bin/activate"
elif [[ -f "${SCRIPT_DIR}/venv-core/Scripts/activate" ]]; then
  source "${SCRIPT_DIR}/venv-core/Scripts/activate"
fi

# Run tests in $TARGET_DIR
cd "$TARGET_DIR" 2>&1 >/dev/null
# Start the timer
TIMER=$(date +%s)

if [[ -z "$SKIP_LIB" ]]; then
  check "ERROR" "lib" "don't commit libraries" "" \
    "$(git ls-files | grep -E 'node_modules/|bower_components/' | sort)"
fi

if [[ -z "$SKIP_MINIFIED" ]]; then
  check "ERROR" "minified" "don't commit minified files" "" \
    "$(git ls-files | grep -E "$RE_MINIFIED" | sort)"
fi

if [[ -z "$SKIP_LFS" ]]; then
  # comm -23 prints lines unique to file list #1
  #   #1: git files > 1 MB, sorted
  #   #2: git lfs files, sorted
  # Note: git ls-tree --format is supported only in Git 2.36+ (Apr 2022), so use --long instead
  check "ERROR" "lfs" "use Git LFS for large files" "" \
    "$(comm -23 <(git ls-tree -r --long HEAD | cut -c53- | awk -F'\t' "\$1 > $LFS_SIZE { print(\$2) }" | sort) <(git lfs ls-files -n | sort))"
fi

if [[ -z "$SKIP_USELESS" ]]; then
  check "ERROR" "useless" "don't commit useless/generated files" "" \
    "$(git ls-files | grep -E '(\.lnk$|^~\$|~$|\.sublime\-|\.ipynb_checkpoints$|\.stackdump$|^thumbs.db$|\.log$)' | sort)"
fi

if [[ -z "$SKIP_DUPLICATE_FILES" ]]; then
  # List commited files  - git ls-tree ...
  # that are big enough  - awk ...
  # Calculate MD5 hash   - xargs md5sum
  # Sort by MD5 hash     - sort
  # Take duplicates      - uniq -w32 -dD
  # Print as groups      - awk '...;sub(/^\*/, "", $2);...'
  #                      -          ^ strip leading * if Cygwin treats file as binary
  # Note: git ls-tree --format is supported only in Git 2.36+ (Apr 2022), so use --long instead
  check "ERROR" "duplicate-files" "delete duplicate files" "" \
    "$(git ls-tree -r --long HEAD | cut -c53- | awk -F'\t' "\$1 > $DUPLICATE_FILESIZE { print(\$2) }" | tr '\n' '\0' | xargs -0 --no-run-if-empty md5sum | sort | uniq -w32 -dD | awk '{if(h!=$1){printf "\n"};sub(/^\*/, "", $2);for (i=2; i<=NF; ++i) printf "%s ", $i;printf "\n";h=$1}')"
fi

if [[ -z "$SKIP_DUPLICATE_LINES" ]]; then
  # jscpd prints a table of results and "Found <nn> clones" and "Detection time: <nn>ms". Ignore these lines at the end using:
  #   grep '^[a-zA-Z]'        # cut out the table
  #   grep -v '^Found '       # remove "Found <nn> clones"
  #   grep -v '^Detection '   # remove "Detection time: <nn>ms"
  check "ERROR" "duplicate-lines" "reduce duplicate lines" "" \
    "$(git ls-files | grep -E '\.(js|py|css|scss)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/jscpd" --min-lines="$DUPLICATE_LINES" 2>&1 | grep '^[a-zA-Z ]' | grep -v '^Found ' | grep -v '^Detection ')"
fi

if [[ -z "$SKIP_PRETTIER" ]]; then
  # NOTE: Don't run prettier on minified files. No point, and it bloats errors
  # NOTE: Don't run prettier on HTML files. It does not handle Tornado / Lodash templates
  check "ERROR" "prettier" "re-format JS/CSS with Prettier" "npx prettier --write \"**/*.{js,jsx,vue,ts,css,scss,sass,yaml,md}\"" \
    "$(git ls-files | grep -E '\.(js|jsx|vue|ts|css|scss|sass|yaml|md)$' | grep -v -E "$RE_MINIFIED" | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/prettier" --loglevel=warn --check 2>&1)"
fi

if [[ -z "$SKIP_BLACK" ]]; then
  # black prints "All done!" and "Oh no!" and "<nn> files would be left unchanged." with unicode characters and color. Strip these with "grep -v ..."
  check "ERROR" "black" "format with Python black" "black . --skip-string-normalization --line-length=99" \
    "$(git ls-files | grep -E '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty black --check --skip-string-normalization --line-length=${PY_LINE_LENGTH} 2>&1 | grep -v "^All done!" | grep -v "^Oh no!" | grep -v "would be left unchanged.")"
fi

if [[ -z "$SKIP_PY_FILENAMES" ]]; then
  check "ERROR" "py-filenames" "use lower_alphanumeric Python paths" "" \
    "$(git ls-files | grep '\.py$' | sort | grep -e '[^a-z0-9_./]')"
fi

if [[ -z "$SKIP_FLAKE8" ]]; then
  # flake8: ignore E203 which is not PEP8 compliant
  # https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#slices
  # flake8: ignore E501 which black handles
  # https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#line-length
  check "ERROR" "flake8" "fix flake8 errors" "" \
    "$(git ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty flake8 --extend-ignore=E203,E501)"
fi

if [[ -z "$SKIP_BANDIT" ]]; then
  check "ERROR" "bandit" "fix bandit security errors" "" \
    "$(git ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty bandit --format txt --severity-level $BANDIT_SEVERITY --confidence-level $BANDIT_CONFIDENCE --quiet 2>/dev/null)"
fi

if [[ -z "$SKIP_ESLINT" ]]; then
  # If user didn't skip default ESLINT checks, and there's no .eslintrc.*, use eslint from root
  if [[ ! -n "$SKIP_ESLINT_DEFAULT" ]] && ! compgen -G ".eslintrc.*" > /dev/null; then
    # When using default config, resolve plugins relative to builderrors
    ESLINT_OPTIONS="--config $WIN_SCRIPT_DIR/.eslintrc.js"
  else
    # When using project config, resolve plugins relative current directory
    npm install > /dev/null 2>&1
    CREATED_NODE_MODULES=1
    ESLINT_OPTIONS="--resolve-plugins-relative-to ."
  fi
  check "ERROR" "eslint" "fix eslint errors" "npx eslint --fix"\
    "$(git ls-files | grep -E '\.(html|js)$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/eslint" $ESLINT_OPTIONS --quiet --format unix 2>&1)"
  if [[ -n "$CREATED_NODE_MODULES" ]]; then
    git -c core.longPaths=true clean -fd > /dev/null
  fi
fi

if [[ -z "$SKIP_STYLELINT" ]]; then
  # stylelint uses v8-compile-cache. Disable it since there's nothing to cache on CI
  export DISABLE_V8_COMPILE_CACHE=1
  if [[ ! -f ".stylelintrc.js" ]]; then
    cp "$SCRIPT_DIR/.stylelintrc.js" .
    CREATED_STYLELINTRC=1
  fi
  check "ERROR" "stylelint" "fix stylelint errors" "" \
    "$(git ls-files | grep -E '\.s?css$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/stylelint" --allow-empty-input --config-basedir "$WIN_SCRIPT_DIR" --custom-syntax "$WIN_SCRIPT_DIR/node_modules/postcss-scss" 2>&1)"
  if [[ -n "$CREATED_STYLELINTRC" ]]; then
    rm .stylelintrc.js
  fi
fi

if [[ -z "$SKIP_HTMLHINT" ]]; then
  if [[ ! -f ".htmlhintrc" ]]; then
    cp "$SCRIPT_DIR/.htmlhintrc" .
    CREATED_HTMLHINTRC=1
  fi
  check "ERROR" "htmlhint" "fix htmlhint errors" "" \
    "$(git ls-files | grep '\.html$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$NODE_DIR/htmlhint" --nocolor --format unix)"
  if [[ -n "$CREATED_HTMLHINTRC" ]]; then
    rm .htmlhintrc
  fi
fi

if [[ -z "$SKIP_CSS_CHARS" ]]; then
  check "ERROR" "css-chars" "reduce CSS code (max: $CSS_CHARS_ERROR chars)" "" \
    "$(git ls-files | grep -E '\.s?css$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$SCRIPT_DIR/codesize" --error=$CSS_CHARS_ERROR --top=10)"
fi

if [[ -z "$SKIP_CODE_CHARS" ]]; then
  check "ERROR" "code-chars" "reduce PY/JS code (max: $CODE_CHARS_ERROR chars)" "" \
    "$(git ls-files | grep -E '\.py$|\.js$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty "$SCRIPT_DIR/codesize" --error=$CODE_CHARS_ERROR --top=10)"
fi

# For warnings, use the venv-extra Python environment
if [[ -f "${SCRIPT_DIR}/venv-extra/bin/activate" ]]; then
  source "${SCRIPT_DIR}/venv-extra/bin/activate"
elif [[ -f "${SCRIPT_DIR}/venv-extra/Scripts/activate" ]]; then
  source "${SCRIPT_DIR}/venv-extra/Scripts/activate"
fi

if [[ -z "$SKIP_NPM_AUDIT" ]]; then
  if [[ -f "package-lock.json" ]]; then
    check "WARNING" "npm-audit" "fix npm audit" "npm audit fix" \
      "$(npm audit --prefer-offline --progress=false | grep -v 'found 0 vulnerabilities')"
  fi
fi

if [[ -z "$SKIP_FLAKE8_EXTRA" ]]; then
  check "WARNING" "flake8-extra" "fix flake8 extra checks" "" \
    "$(git ls-files | grep '\.py$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty flake8 --extend-ignore=E203,E501)"
fi

if [[ -z "$SKIP_ABSOLUTE_URLS" ]]; then
  check "WARNING" "absolute-urls" "avoid absolute URLs" "" \
    "$(git ls-files | grep '\.html$' | sort | tr '\n' '\0' | xargs -0 --no-run-if-empty grep -e 'href\s*=\s*"/' -e 'src\s*=\s*"/')"
fi

# If ANY of the ERRORS above failed, exit with an error message
if [[ $EXIT_STATUS -ne 0 ]]; then
  echo -e "${RED}---------------------------------------------------------------------${CLEAR}"
  echo -e "${RED}BUILD FAILED on builderrors v$VERSION${CLEAR}"
else
  echo -e "${GREEN}---------------------------------------------------------------------${CLEAR}"
  echo -e "${GREEN}BUILD PASSED on builderrors v$VERSION${CLEAR}"
fi
echo -e "${YELLOW}HELP${CLEAR} https://github.com/gramener/builderrors"

exit $EXIT_STATUS
